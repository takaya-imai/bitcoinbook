[[blockchain]]
== The Blockchain
== ブロックチェーン

=== Introduction
=== イントロダクション

((("blockchains", id="ix_ch07-asciidoc0", range="startofrange")))The blockchain data structure is an ordered, back-linked list of blocks of transactions. The blockchain can be stored as a flat file, or in a simple database. The Bitcoin Core client stores the blockchain metadata using((("LevelDB database (Google)"))) Google's LevelDB database. Blocks are linked "back," each referring to the previous block in the chain. The blockchain is often visualized as a vertical stack, with blocks layered on top of each other and the first block serving as the foundation of the stack. The visualization of blocks stacked on top of each other results in the use of terms such as "height" to refer to the distance from the first block, and "top" or "tip" to refer to the most recently added block. 

((("blockchains", id="ix_ch07-asciidoc0", range="startofrange")))ブロックチェーンのデータ構造は順序を持った後方連結リストで、未来から過去に向かっていくトランザクションブロックの連結リストです。ブロックチェーンはフラットファイルとして保存、または簡易データベースに保存することができ、Bitcoin Coreクライアントはブロックチェーンのメタデータを((("LevelDB database (Google)"))) GoogleのLevelDBに保存しています。ブロックチェーンは"後方"に連結されており、それぞれのブロックはブロックチェーンでの前のブロックを指しています。ブロックチェーンはよく垂直方向のスタックとして可視化され、新しいブロックは一番上に重ねられていき一番最初のブロックはスタックの一番底にあります。ブロックチェーンを垂直方向のスタックとしてイメージしているため、"height"という用語は最初のブロックからの距離を表し、"top"または"tip"は最も最近追加されたブロックを表します。

Each block within the blockchain is identified by a hash, generated using the SHA256 cryptographic hash algorithm on the header of the block. Each block also references a previous block, known as the((("parent blocks"))) _parent_ block, through the "previous block hash" field in the block header. In other words, each block contains the hash of its parent inside its own header. The sequence of hashes linking each block to its parent creates a chain going back all the way to the first block ever created, known as the((("genesis block"))) _genesis block_. 

ブロックチェーンにあるそれぞれのブロックはハッシュによって一意に指定され、このハッシュはブロックのヘッダをSHA256ハッシュアルゴリズムに通して生成されたものです。それぞれのブロックはブロックヘッダの"previous block hash"フィールドを通して ((("parent blocks"))) _親_ ブロックと呼ばれている１つ前のブロックを参照しています。別の言い方をすると、それぞれのブロックはそれ自身のヘッダに親のハッシュを持っているということになります。このハッシュの結びつきは、一番上のブロックから ((("genesis block"))) _起源ブロック_ と呼ばれる一番最初のブロックまでのチェーンを形成します。

Although a block has just one parent, it can temporarily have multiple children. Each of the children refers to the same block as its parent and contains the same (parent) hash in the "previous block hash" field. Multiple children arise during a blockchain "fork," a temporary situation that occurs when different blocks are discovered almost simultaneously by different miners (see <<forks>>). Eventually, only one child block becomes part of the blockchain and the "fork" is resolved. Even though a block may have more than one child, each block can have only one parent. This is because a block has one single "previous block hash" field referencing its single parent. 

ブロックはたった１つの親を持ちますが、一時的に複数の子供を持ちえます。それぞれの子供は同じブロックを親として参照し、"previous block hash"フィールドに同じハッシュを含んでいます。複数の子供はブロックチェーンが"フォーク"しているときに起こり、異なるブロックがほぼ同時に異なるマイナーによって発見されるとこのような状況が起こりえます(<<forks>>参照)。どこかのタイミングで偶然１つの子ブロックがブロックチェーンの一部になるとこの"フォーク"は解決されます。たとえブロックが２つ以上の子供を持っていたとしても、それぞれのブロックは必ず１つの親を持ちます。これは"previous block hash"フィールドが１つしかなく必ず１つの親しか参照できないためです。

The "previous block hash" field is inside the block header and thereby affects the _current_ block's hash. The child's own identity changes if the parent's identity changes. When the parent is modified in any way, the parent's hash changes. The parent's changed hash necessitates a change in the "previous block hash" pointer of the child. This in turn causes the child's hash to change, which requires a change in the pointer of the grandchild, which in turn changes the grandchild, and so on. ((("security","immutability of blockchain and")))This cascade effect ensures that once a block has many generations following it, it cannot be changed without forcing a recalculation of all subsequent blocks. Because such a recalculation would require enormous computation, the existence of a long chain of blocks makes the blockchain's deep history immutable, which is a key feature of bitcoin's security. 

"previous block hash"フィールドはブロックヘッダにあるため、 _現在_ のブロックのハッシュはこの"previous block hash"によって変わることになります。なんらかの方法で親ブロックが修正されると親ブロックのハッシュが変わります。親ブロックのハッシュが変わると、子ブロックの"previous block hash"フィールドのハッシュを変える必要が出てきます。子ブロックの"previous block hash"フィールドのハッシュが変わると、子ブロックのハッシュが変わります。子供ブロックのハッシュを変えると孫ブロックの"previous block hash"フィールドのハッシュが変わり、孫ブロックのハッシュが変わります。これは順々に起こっていきます。((("security","immutability of blockchain and")))このような連なり効果があるため、一度ブロックが多くの世代を持つようになるとこのブロックの後に続く全てのブロックのハッシュの再計算をしなければブロックを変更できなくなるのです。このような再計算は巨大な計算量を必要とするため、ブロックの長いチェーンによってブロックチェーンは変更不可能なものになり、これがBitcoinのセキュリティの重要な要素となっています。

One way to think about the blockchain is like layers in a geological formation, or glacier core sample. The surface layers might change with the seasons, or even be blown away before they have time to settle. But once you go a few inches deep, geological layers become more and more stable. By the time you look a few hundred feet down, you are looking at a snapshot of the past that has remained undisturbed for millions of years. In the blockchain, the most recent few blocks might be revised if there is a chain recalculation due to a fork. The top six blocks are like a few inches of topsoil. But once you go more deeply into the blockchain, beyond six blocks, blocks are less and less likely to change. After 100 blocks back there is so much stability that the coinbase transaction—the transaction containing newly mined bitcoins—can be spent. A few thousand blocks back (a month) and the blockchain is settled history, for all practical purposes. While the protocol always allows a chain to be undone by a longer chain and while the possibility of any block being reversed always exists, the probability of such an event decreases as time passes until it becomes infinitesimal.

(CONFLICT)
ブロックチェーンをイメージする１つの方法は地層や氷河のレイヤーのようなものです。表面のレイヤーは季節ごとに変わってしまう、または沈着する前であれば風でさえ飛ばされてしまうかもしれません。しかし、一度数インチの深さになると、どんどん安定していきます。数百フィートも下っていくと、数百万年間もの間そのままになっていた過去のスナップショットが見えてきます。ブロックチェーンでは、ほんの最近の２、３ブロックは再計算を行って書き換えられるかもしれません。先頭の６ブロックは表土の２、３インチのようなものです。しかし、一度６ブロックより深くのブロックチェーンの奥に入ってしまうと、ブロックは変更されないようになります。100ブロックも重なるととても安定になり、数千ブロックが重なる(一ヶ月分)とこのブロックチェーンは確固たるものになります。これはもう決して変更されません。

=== Structure of a Block
=== ブロックの構造

((("blocks","structure of")))A block is a container data structure that aggregates transactions for inclusion in the public ledger, the blockchain. The block is made of a header, containing metadata, followed by a long list of transactions that make up the bulk of its size. The block header is 80 bytes, whereas the average transaction is at least 250 bytes and the average block contains more than 500 transactions. A complete block, with all transactions, is therefore 1,000 times larger than the block header. <<block_structure1>> describes the structure of a block.

((("blocks","structure of")))ブロックは、ブロックチェーンに含めるために集められたトランザクションのデータコンテナです。ブロックはメタデータを含むヘッダ、トランザクションの長いリストによって構成されます。ブロックヘッダは80バイトあり、平均トランザクションデータサイズは少なくとも250バイト、ブロックに含まれる平均トランザクション数は500個以上です。よって、ブロックはブロックヘッダの1000倍以上のデータサイズを持つことになります。<<block_structure1>>はブロックの構造を示しています。

[[block_structure1]]
.The structure of a block
[options="header"]
|=======
|Size| Field | Description
| 4 bytes | Block Size | The size of the block, in bytes, following this field
| 80 bytes | Block Header | Several fields form the block header
| 1-9 bytes (VarInt) | Transaction Counter | How many transactions follow
| Variable | Transactions | The transactions recorded in this block
|=======

[[block_header]]
=== Block Header
=== ブロックヘッダ

((("block headers")))((("blocks","headers")))The block header consists of three sets of block metadata. First, there is a reference to a previous block hash, which connects this block to the previous block in the blockchain. The second set of metadata, namely the((("difficulty target","in block header")))((("nonce,","in block header")))((("timestamping blocks","in block header"))) _difficulty_, _timestamp_, and _nonce_, relate to the mining competition, as detailed in <<ch8>>. The third piece of metadata is the merkle tree root, a data structure used to efficiently summarize all the transactions in the block. <<block_header_structure_ch07>> describes the structure of a block header.

((("block headers")))((("blocks","headers")))ブロックヘッダは３つの部分によって構成されています。１つ目は、前のブロックハッシュへの参照でブロックチェーンの中でこのブロックと前のブロックを繋いでいます。２つ目は、((("difficulty target","in block header")))((("nonce,","in block header")))((("timestamping blocks","in block header"))) _難易度_ 、 _timestamp_ 、 _nonce_ で、<<ch8>>で詳細に説明するマイニング競争に関係するところです。３つ目は、ブロック内の全てのトランザクションを効率よくまとめるために使われるデータ構造である merkle tree root です。
 
        
[[block_header_structure_ch07]]
.The structure of the block header
[options="header"]
|=======
|Size| Field | Description
| 4 bytes | Version | A version number to track software/protocol upgrades
| 32 bytes | Previous Block Hash | A reference to the hash of the previous (parent) block in the chain
| 32 bytes | Merkle Root | A hash of the root of the merkle tree of this block's transactions
| 4 bytes | Timestamp | The approximate creation time of this block (seconds from Unix Epoch)
| 4 bytes | Difficulty Target | The proof-of-work algorithm difficulty target for this block
| 4 bytes | Nonce | A counter used for the proof-of-work algorithm
|=======

The nonce, difficulty target, and timestamp are used in the mining process and will be discussed in more detail in <<ch8>>.

nonce、難易度ターゲット、timestampはマイニングプロセスで使用され、<<ch8>>で詳細に説明します。

[[block_hash]]
=== Block Identifiers: Block Header Hash and Block Height
=== ブロック識別子: ブロックヘッダハッシュとブロック高

((("blocks","header hash")))((("blocks","height")))((("blocks","identifiers")))The primary identifier of a block is its cryptographic hash, a digital fingerprint, made by hashing the block header twice through the SHA256 algorithm. The resulting 32-byte hash is called the((("block hash")))((("block header hash"))) _block hash_ but is more accurately the _block header hash_, pass:[<phrase role="keep-together">because only the block header is used to compute it. For example,</phrase>] +000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f+ is the block hash of the first bitcoin block ever created. The block hash identifies a block uniquely and unambiguously and can be independently derived by any node by simply hashing the block header. 

((("blocks","header hash")))((("blocks","height")))((("blocks","identifiers")))ブロックの主要な識別子はこのブロックの暗号学的なハッシュで、ブロックヘッダをSHA256アルゴリズムで２回ハッシュ化したデジタルフィンガープリントです。結果として出てくる32バイトハッシュは ((("block hash")))((("block header hash"))) _ブロックハッシュ_ と呼ばれています。もっと正確に言うと _ブロックヘッダハッシュ_ で pass:[<phrase role="keep-together">ブロックヘッダだけを使ってこのハッシュを計算しているためです。例えば、 </phrase>] +000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f+ は最初のBitcoinブロックのブロックハッシュです。このブロックハッシュはブロックを一意かつ曖昧さなく指定し、ブロックヘッダを単にハッシュ化するだけでどのノードでも独立に導出することができます。

Note that the block hash is not actually included inside the block's data structure, neither when the block is transmitted on the network, nor when it is stored on a node's persistence storage as part of the blockchain. Instead, the block's hash is computed by each node as the block is received from the network. The block hash might be stored in a separate database table as part of the block's metadata, to facilitate indexing and faster retrieval of blocks from disk.

ブロックハッシュは実際ブロックのデータの中には含まれていません。これは、ブロックがBitcoinネットワークに放出されるときもブロックチェーンの一部として永続的なストレージに保存されるときもです。代わりに、ブロックのハッシュはブロックがBitcoinネットワークからノードに着いたときに各ノードによって計算されます。ただブロックハッシュがブロックのメタデータの一部としてノード個別のデータベースの中に保存され、ディスクからブロックの情報を取り出す速度を速めたりインデクシングを容易にすることに使われている可能性はあります。

A second way to identify a block is by its position in the blockchain, called the((("block height"))) pass:[<phrase role="keep-together"><emphasis>block height</emphasis>. The first block ever created is at block height 0 (zero) and is the</phrase>] pass:[<phrase role="keep-together">same block that was previously referenced by the following block hash</phrase>] +000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f+. A block can thus be identified two ways: by referencing the block hash or by referencing the block height. Each subsequent block added "on top" of that first block is one position "higher" in the blockchain, like boxes stacked one on top of the other. The block height on January 1, 2014, was approximately 278,000, meaning there were 278,000 blocks stacked on top of the first block created in January 2009. 

ブロックを一意に指定する２つ目の方法は、ブロックチェーン内の場所によって特定することで、((("block height"))) pass:[<phrase role="keep-together"><emphasis>ブロック高</emphasis> と呼ばれています。一番最初に作られたブロックのブロック高は０で、</phrase>] pass:[<phrase role="keep-together">このブロックは以前次のブロックハッシュで参照されていたものです。</phrase>] +000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f+ 。このため、ブロックは２つの方法、ブロックハッシュによる参照、ブロック高による参照、で一意に指定されます。先ほどの一番最初のブロックの"一番上"に載せた次のブロックは１つだけ位置が"高く" 、これは箱を積み重ねたようなものです。2014年1月時点のブロック高は約278,000でした。これは、2009年1月に作られた一番最初のブロックの上に278,000個のブロックが積み重ねられていることを意味します。

Unlike the block hash, the block height is not a unique identifier. Although a single block will always have a specific and invariant block height, the reverse is not true—the block height does not always identify a single block. Two or more blocks might have the same block height, competing for the same position in the blockchain. This scenario is discussed in detail in the section <<forks>>. The block height is also not a part of the block's data structure; it is not stored within the block. Each node dynamically identifies a block's position (height) in the blockchain when it is received from the bitcoin network. The block height might also be stored as metadata in an indexed database table for faster retrieval. 

ブロックハッシュと違って、ブロック高はユニークな識別子ではありません。１つのブロックは特定のブロック高が割り当てられていますが、逆は真ではありません。２つまたはもっと多くのブロックが同じブロック高を持っているかもしれないからです。これは、ブロックチェーン内の同じ場所をマイナーが競争して取得使用としているためです。どのようにしてこれが起こるのかについては<<forks>>の節で詳細に説明します。ブロック高はまたブロックのデータの一部でもありません。それぞれのノードは、Bitcoinネットワークからブロックを受け取ったときにこのブロックがブロックチェーン内のどこの位置(ブロック高)にあるのかをブロック高を使うことなくブロックハッシュから動的に特定します。ただこのブロック高は、ブロックチェーンからすばやくブロック情報を取得する目的でデータベースにメタデータとして保存されている可能性はあります。
    
[TIP]
====
A block's _block hash_ always identifies a single block uniquely. A block also always has a specific _block height_. However, it is not always the case that a specific block height can identify a single block. Rather, two or more blocks might compete for a single position in the blockchain. 
====

=== The Genesis Block
=== 起源ブロック

((("blockchains","genesis block")))((("genesis block")))The first block in the blockchain is called the genesis block and was created in 2009. It is the common ancestor of all the blocks in the blockchain, meaning that if you start at any block and follow the chain backward in time, you will eventually arrive at the genesis block. 

((("blockchains","genesis block")))((("genesis block")))ブロックチェーンの一番最初のブロックは起源ブロックと呼ばれており、これは2009年に作られたものです。これはブロックチェーンにある全てのブロックの祖先であり、どんなブロックからスタートしてチェーンを過去にさかのぼっていっても結局起源ブロックにぶつかります。

Every node always starts with a blockchain of at least one block because the genesis block is statically encoded within the bitcoin client software, such that it cannot be altered. Every node always "knows" the genesis block's hash and structure, the fixed time it was created, and even the single transaction within. Thus, every node has the starting point for the blockchain, a secure "root" from which to build a trusted blockchain. 

全てのノードは１つのブロックのブロックチェーンからいつも始まります。というのは、起源ブロックは変更できないようにBitcoinクライアントにハードコーディングされているためです。全てのノードは起源ブロックのハッシュとデータ、作成された日時、１つのトランザクションが含まれていることを"知って"おり、これにより信頼されたブロックチェーンを構築するときの安全な"根幹"を持つことができるのです。????

((("Bitcoin Core client","genesis block in")))See the statically encoded genesis block inside the Bitcoin Core client, in http://bit.ly/1x6rcwP[chainparams.cpp].

((("Bitcoin Core client","genesis block in")))Bitcoin Coreクライアントの内部にハードコーディングされた起源ブロックは、 http://bit.ly/1x6rcwP[chainparams.cpp] を参照してみてください。

The following identifier hash belongs to the genesis block: 

以下のハッシュが起源ブロックのハッシュです。

----
000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f
----

You can search for that block hash in any block explorer website, such as blockchain.info, and you will find a page describing the contents of this block, with a URL containing that hash:

blockchain.infoのようなブロック探索サイトでブロックハッシュを検索することができ、以下のハッシュを含むURLを参照することで起源ブロックの内容が書かれたページを見ることができます。

https://blockchain.info/block/000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f

https://blockexplorer.com/block/000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f

Using the Bitcoin Core reference client on the command line:

Bitcoin Core参照クライアントの以下のコマンドを実行することでも起源ブロックの内容を確認することができます。

----
$ bitcoind getblock 000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f
----
[source,json]
----
{
    "hash" : "000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f",
    "confirmations" : 308321,
    "size" : 285,
    "height" : 0,
    "version" : 1,
    "merkleroot" : "4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b",
    "tx" : [
        "4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b"
    ],
    "time" : 1231006505,
    "nonce" : 2083236893,
    "bits" : "1d00ffff",
    "difficulty" : 1.00000000,
    "nextblockhash" : "00000000839a8e6886ab5951d76f411475428afc90947ee320161bbf18eb6048"
}
----

The genesis block contains a hidden message within it. The coinbase transaction input contains the text "The Times 03/Jan/2009 Chancellor on brink of second bailout for banks." This message was intended to offer proof of the earliest date this block was created, by referencing the headline of the British newspaper _The Times_. It also serves as a tongue-in-cheek reminder of the importance of an independent monetary system, with bitcoin's launch occurring at the same time as an unprecedented worldwide monetary crisis. The message was embedded in the first block by Satoshi Nakamoto, bitcoin's creator. 

起源ブロックには隠されたメッセージが含まれています。coinbase transactionインプットには"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks."(リーマンショックの影響を受けた銀行へのイギリス政府からの資金援助に関する記事????)という文章が記載されています。このメッセージはイギリスの新聞 _タイムズ紙_ のヘッドラインを参照することで起源ブロックが2009年1月3日以前になかったことの証明になっています。また、皮肉にも銀行と独立した重要な通貨システムであるBitcoinが稼働し始め、前例のない全世界共通通貨の稼働という決定的な出来事が起きたリマインダーにもなっているのです。????

=== Linking Blocks in the Blockchain
=== ブロックチェーン内でのブロック連結

((("blockchains","linking blocks to")))((("blocks","linking to blockchain")))Bitcoin full nodes maintain a local copy of the blockchain, starting at the genesis block. The local copy of the blockchain is constantly updated as new blocks are found and used to extend the chain. As a node receives incoming blocks from the network, it will validate these blocks and then link them to the existing blockchain. To establish a link, a node will examine the incoming block header and look for the "previous block hash."

((("blockchains","linking blocks to")))((("blocks","linking to blockchain")))Bitcoin full nodeは、起源ブロックから始まるブロックチェーンのローカルコピーを保持しています。このブロックチェーンのローカルコピーは、新しいブロックが見つかりチェーンが拡張されるたびに定期的にアップデートされます。ノードがBitcoinネットワークからブロックを受け取ったとき、これらのブロックの検証を行いすでに保持しているブロックチェーンにこれらを連結します。連結するために、ノードは受け取ったブロックヘッダを調べ"previous block hash"を探します。

Let's assume, for example, that a node has 277,314 blocks in the local copy of the blockchain. The last block the node knows about is block 277,314, with a block header hash of +00000000000000027e7ba6fe7bad39faf3b5a83daed765f05f7d1b71a1632249+. 

例として、あるノードが277,314個のブロックをブロックチェーンのローカルコピーに持っていると仮定してみましょう。ノードが知っている一番最後のブロックはブロック277,314で、ブロックヘッダのハッシュは +00000000000000027e7ba6fe7bad39faf3b5a83daed765f05f7d1b71a1632249+ です。

The bitcoin node then receives a new block from the network, which it parses as follows:

Bitcoinノードは新しいブロックをBitcoinネットワークから受け取りました。このブロックは以下のようなものです。

[source,json]
----
{
    "size" : 43560,
    "version" : 2,
    "previousblockhash" : 
        "00000000000000027e7ba6fe7bad39faf3b5a83daed765f05f7d1b71a1632249",
    "merkleroot" : 
        "5e049f4030e0ab2debb92378f53c0a6e09548aea083f3ab25e1d94ea1155e29d",
    "time" : 1388185038,
    "difficulty" : 1180923195.25802612,
    "nonce" : 4215469401,
    "tx" : [
        "257e7497fb8bc68421eb2c7b699dbab234831600e7352f0d9e6522c7cf3f6c77",

 #[... many more transactions omitted ...]

        "05cfd38f6ae6aa83674cc99e4d75a1458c165b7ab84725eda41d018a09176634"
    ]
}
----

Looking at this new block, the node finds the +previousblockhash+ field, which contains the hash of its parent block. It is a hash known to the node, that of the last block on the chain at height 277,314. Therefore, this new block is a child of the last block on the chain and extends the existing blockchain. The node adds this new block to the end of the chain, making the blockchain longer with a new height of 277,315. <<chain_of_blocks>> shows the chain of three blocks, linked by references in the +previousblockhash+ field.

このノードはこの新しいブロックを参照し親ブロックのハッシュを含む +previousblockhash+ フィールドを見つけます。調べてみると、この +previousblockhash+ フィールドにあるハッシュが、ノードが持っているブロックチェーンの一番最後のブロックのハッシュであったため、ノードはこの新しいブロックが一番最後のブロックの子ブロックであることが分かり、ローカルのブロックチェーンを拡張しました。最終的に、このノードは新しいブロックをブロックチェーンの最後に追加し、新しいブロック高 277,315 を持ったブロックチェーンを作りました。

[[merkle_trees]]
=== Merkle Trees
=== Merkle Trees

((("blockchains","merkle trees and", id="ix_ch07-asciidoc1", range="startofrange")))((("merkle trees", id="ix_ch07-asciidoc2", range="startofrange")))Each block in the bitcoin blockchain contains a summary of all the transactions in the block, using a _merkle tree_.

((("blockchains","merkle trees and", id="ix_ch07-asciidoc1", range="startofrange")))((("merkle trees", id="ix_ch07-asciidoc2", range="startofrange")))ブロックチェーンのそれぞれのブロックには _merkle tree_ を使ったブロックに含まれる全てのトランザクションのサマリが含まれています。

A _merkle tree_, also known as a((("binary hash tree"))) _binary hash tree_, is a data structure used for efficiently summarizing and verifying the integrity of large sets of data. Merkle trees are binary trees containing cryptographic hashes. The term "tree" is used in computer science to describe a branching data structure, but these trees are usually displayed upside down with the "root" at the top and the "leaves" at the bottom of a diagram, as you will see in the examples that follow.

_merkle tree_ は ((("binary hash tree")) _二分ハッシュ木_ と呼ばれるもので、効率的に大きなデータをまとめ、データ全体を検証できるようにしています。merkle treeは暗号学的なハッシュを含む二分木です。"tree"という言葉は、コンピュータサイエンスの分野で使われる枝葉を持つデータ構造を表す言葉として使われています。しかし、これらの木はあとで出てくる例で見るように通常上下が逆の状態で表され、上方向が"根っこ"で下方向が葉になっています。

[[chain_of_blocks]]
.Blocks linked in a chain, by reference to the previous block header hash
image::images/msbt_0701.png[]

Merkle trees are used in bitcoin to summarize all the transactions in a block, producing an overall digital fingerprint of the entire set of transactions, providing a very efficient process to verify whether a transaction is included in a block. A((("Merkle trees","constructing"))) Merkle tree is constructed by recursively hashing pairs of nodes until there is only one hash, called the _root_, or _merkle root_. The cryptographic hash algorithm used in bitcoin's merkle trees is SHA256 applied twice, also known as double-SHA256. 

merkle treeはブロックに含まれている全てのトランザクションをまとめるために使われ、トランザクション全体のデジタルフィンガープリントを作り出し、あるトランザクションがブロックに含まれているかどうかを確認するとても効率的な方法を提供します。((("Merkle trees","constructing"))) merkle treeは再帰的に葉ノードのペアから１つのハッシュ値を計算し、ハッシュが１つだけ残るまで続けます。この残ったハッシュを _root_ または _merkle root_ と呼びます。Bitcoinのmerkle treeに使われている暗号学的なハッシュアルゴリズムはSHA256を２回適用したもので、double-SHA256とも呼ばれています。

When N data elements are hashed and summarized in a merkle tree, you can check to see if any one data element is included in the tree with at most +2*log~2~(N)+ calculations, making this a very efficient data structure.  

N個のデータ要素がハッシュ化されmerkle treeの中にまとめられているとき、多くても +2*log~2~(N)+ 回の計算をすることであるデータ要素がmerkle treeに含まれているかどうかを知ることができます。(線形探索だと多くてN回)

The merkle tree is constructed bottom-up. In the following example, we start with four transactions, A, B, C and D, which form the _leaves_ of the Merkle tree, as shown in <<simple_merkle>>. The transactions are not stored in the merkle tree; rather, their data is hashed and the resulting hash is stored in each leaf node as H~A~, H~B~, H~C~, and H~D~:

merkle treeは底部から作られていきます。次の例で見るように、A、B、C、Dの４つのトランザクションから始めてみましょう。これらは<<simple_merkle>>図に示されている通りmerkle treeの _葉_ を構成するものです。

----
H~A~ = SHA256(SHA256(Transaction A))
----

Consecutive pairs of leaf nodes are then summarized in a parent node, by concatenating the two hashes and hashing them together. For example, to construct the parent node H~AB~, the two 32-byte hashes of the children are concatenated to create a 64-byte string. That string is then double-hashed to produce the parent node's hash:

葉ノードの隣同士のペアは、ペアそれぞれのハッシュをくっつけたもののハッシュを取り親ノードにまとめられます。例えば、親ノード H~AB~ を作るためには２つの子ノードの32バイトハッシュをくっつけて64バイトの文字列を作ります。この後この文字列は２回ハッシュ化され親ノードのハッシュが作り出されます。

----
H~AB~ = SHA256(SHA256(H~A~ + H~B~))
----

The process continues until there is only one node at the top, the node known as the Merkle root. That 32-byte hash is stored in the block header and summarizes all the data in all four transactions.

このプロセスはノードが１つになるまで続けられ、この最後の１つのノードを merkle root と呼びます。32バイトハッシュはブロックヘッダに保存され、４つの全トランザクションのデータがmerkle rootのハッシュにまとめられます。

[[simple_merkle]]
.Calculating the nodes in a merkle tree
image::images/msbt_0702.png["merkle_tree"]

Because the merkle tree is a binary tree, it needs an even number of leaf nodes. If there is an odd number of transactions to summarize, the last transaction hash will be duplicated to create an even number of leaf nodes, also known as a((("balanced trees"))) _balanced tree_. This is shown in <<merkle_tree_odd>>, where transaction C is duplicated.

merkle treeは二分木であるため、葉ノードが偶数個になる必要があります。もしトランザクションの数が奇数個である場合は、最後のトランザクションハッシュは自分自身とくっつけてハッシュを作りバランス木として知られている偶数個の葉ノードができるようにします。これは<<merkle_tree_odd>>図に示されており、トランザクションCが二重になっています。

[[merkle_tree_odd]]
.Duplicating one data element achieves an even number of data elements
image::images/msbt_0703.png["merkle_tree_odd"]

The same method for constructing a tree from four transactions can be generalized to construct trees of any size. In bitcoin it is common to have several hundred to more than a thousand transactions in a single block, which are summarized in exactly the same way, producing just 32 bytes of data as the single merkle root. In <<merkle_tree_large>>, you will see a tree built from 16 transactions. Note that although the root looks bigger than the leaf nodes in the diagram, it is the exact same size, just 32 bytes. Whether there is one transaction or a hundred thousand transactions in the block, the merkle root always summarizes them into 32 bytes. 

４つのトランザクションから木を作る方法は、どんなサイズの木にも一般化できます。Bitcoinでは、１つのブロックに数百から千個以上のトランザクションを持つことはよくあり、さきほどの方法と全く同じ方法でmerkle rootの32バイトハッシュとしてまとめられます。<<merkle_tree_large>>図には、１６個のトランザクションからなるmerkle treeが書かれています。図の中でmerkle rootは葉ノードよりも大きく見えますが、厳密に同じサイズで32バイトです。ブロックの中に１つのトランザクションしかないのか、１０万個のトランザクションがあるのかに関わらず、merkle rootは常に32バイトのハッシュにまとめられます。

[[merkle_tree_large]]
.A merkle tree summarizing many data elements
image::images/msbt_0704.png["merkle_tree_large"]

To prove that a specific transaction is included in a block, a node only needs to produce +log~2~(N)+ 32-byte hashes, constituting an((("authentication path")))((("merkle path"))) _authentication path_ or _merkle path_ connecting the specific transaction to the root of the tree. This is especially important as the number of transactions increases, because the base-2 logarithm of the number of transactions increases much more slowly. This allows bitcoin nodes to efficiently produce paths of 10 or 12 hashes (320–384 bytes), which can provide proof of a single transaction out of more than a thousand transactions in a megabyte-size block. 

特定のトランザクションがブロックに含められていることを証明するために、Bitcoinノードはたった +log~2~(N)+ 個の32バイトハッシュを作り出すだけでよく、これにより特定のトランザクションをmerkle tree rootに繋ぐ ((("authentication path")))((("merkle path"))) _authentication path_ または _merkle path_ を構成します。これはブロックに含まれるトランザクションの数が多くなるにつれて特に重要になっていきます。というのは、トランザクション数の２を底とする対数はトランザクション数が増えてもほとんど大きくならないからです。このことで、データサイズが数MBにもなるブロックに含まれる千個以上のトランザクションから１個のトランザクションを特定するためのmerkle pathを、たった10個から12個のハッシュ(320-384バイト)で効率的に作り出すことができるのです。

In <<merkle_tree_path>>, a node can prove that a transaction K is included in the block by producing a merkle path that is only four 32-byte hashes long (128 bytes total). The path consists of the four hashes (noted in blue in <<merkle_tree_path>>) H~L~, H~IJ~, H~MNOP~ and H~ABCDEFGH~. With those four hashes provided as an authentication path, any node can prove that H~K~ (noted in green in the diagram) is included in the merkle root by computing four additional pair-wise hashes H~KL~, H~IJKL~, H~IJKLMNOP~, and the merkle tree root (outlined in a dotted line in the diagram). 

<<merkle_tree_path>>図にある通り、Bitcoinノードはたった４つの32バイトハッシュ(全部で128バイト)を使ったmerkle pathを作り出すことであるトランザクションKがブロックに含まれていることを証明できるのです。このmerkle pathは４つのハッシュ H~L~ 、 H~IJ~ 、 H~MNOP~ 、 H~ABCDEFGH~ から構成されます(これらハッシュは<<merkle_tree_path>>図に青い四角で記されています)。これらの４つのハッシュがauthentication pathとして提示されると、あらゆるBitcoinノードは H~K~ (<<merkle_tree_path>>図に緑の四角で表示)がmerkle rootに含まれているということを対となる追加の４つのハッシュ、H~KL~ 、 H~IJKL~ 、 H~IJKLMNOP~ 、 merkle tree root を計算することで示すことができます(<<merkle_tree_path>>図に点線で縁取られた四角で表示)。????

[[merkle_tree_path]]
.A merkle path used to prove inclusion of a data element
image::images/msbt_0705.png["merkle_tree_path"]


The code in <<merkle_example>> demonstrates the process of creating a merkle tree from the leaf-node hashes up to the root, using the libbitcoin library for some helper functions.

<<merkle_example>>にあるコードは、葉ノードからmerkle rootまでのmerkle treeを作り出すプロセスをデモンストレーションであり、いくつかの補助関数でlibbitcoinライブラリを使っています。

++++
<?hard-pagebreak?>
++++

[[merkle_example]]
.Building a merkle tree
====
[source, cpp]
----
include::code/merkle.cpp[]
----
====

<<merkle_example_run>> shows the result of compiling and running the merkle code.

<<merkle_example_run>>にさきほどのコードをコンパイルし実行した結果を示します。

[[merkle_example_run]]
.Compiling and running the merkle example code
====
[source,bash]
----
$ # Compile the merkle.cpp code
$ g++ -o merkle merkle.cpp $(pkg-config --cflags --libs libbitcoin)
$ # Run the merkle executable
$ ./merkle
Current merkle hash list:
  32650049a0418e4380db0af81788635d8b65424d397170b8499cdc28c4d27006
  30861db96905c8dc8b99398ca1cd5bd5b84ac3264a4e1b3e65afa1bcee7540c4

Current merkle hash list:
  d47780c084bad3830bcdaf6eace035e4c6cbf646d103795d22104fb105014ba3

Result: d47780c084bad3830bcdaf6eace035e4c6cbf646d103795d22104fb105014ba3

----
====

The efficiency of merkle trees becomes obvious as the scale increases. <<block_structure2>> shows the amount of data that needs to be exchanged as a merkle path to prove that a transaction is part of a block.

merkle treeの効率性はブロックのデータサイズスケールが大きくなるほど明らかになります。<<block_structure2>>は、ブロックのデータサイズ、ブロック内トランザクション数に応じて必要なmerkle pathの大きさを示しています。

[[block_structure2]]
.Merkle tree efficiency
[options="header"]
|=======
|Number of transactions| Approx. size of block | Path size (hashes) | Path size (bytes)
| 16 transactions | 4 kilobytes | 4 hashes | 128 bytes
| 512 transactions | 128 kilobytes | 9 hashes | 288 bytes
| 2048 transactions | 512 kilobytes | 11 hashes | 352 bytes
| 65,535 transactions | 16 megabytes | 16 hashes | 512 bytes
|=======

As you can see from the table, while the block size increases rapidly, from 4 KB with 16 transactions to a block size of 16 MB to fit 65,535 transactions, the merkle path required to prove the inclusion of a transaction increases much more slowly, from 128 bytes to only 512 bytes. With merkle trees, a node can download just the block headers (80 bytes per block) and still be able to identify a transaction's inclusion in a block by retrieving a small merkle path from a full node, without storing or transmitting the vast majority of the blockchain, which might be several gigabytes in size. Nodes that do not maintain a full blockchain, called simplified payment verification (SPV nodes), use merkle paths to verify transactions without downloading full blocks.(((range="endofrange", startref="ix_ch07-asciidoc2")))(((range="endofrange", startref="ix_ch07-asciidoc1")))

表から分かるように、ブロックのデータサイズが急速に大きく(16個のトランザクションの時は4KBですが、65,535個のトランザクションだと16MB)なっていっても、merkle pathのデータサイズはトランザクション数が大きくなるよりもゆっくり大きくなります(128バイトから512バイトにしか増えない)。merkle treeとともに、Bitcoinノードはブロックヘッダ(１ブロックあたり80バイト)だけをダウンロードします。???? Bitcoinノードはfull nodeから小さなmerkle pathを取得することでブロックの中にあるトランザクションが含まれているかを知ることができます。これには、数GBもあるブロックチェーンの大半を保存したり、また受け渡してもらう必要もありません。

=== Merkle Trees and Simplified Payment Verification (SPV)
=== merkle treeとSimplified Payment Verification (SPV)

((("merkle trees","SPV and")))((("Simplified Payment Verification (SPV) nodes","merkle trees and")))Merkle trees are used extensively by SPV nodes. SPV nodes don't have all transactions and do not download full blocks, just block headers. In order to verify that a transaction is included in a block, without having to download all the transactions in the block, they use an authentication path, or merkle path. 

((("merkle trees","SPV and")))((("Simplified Payment Verification (SPV) nodes","merkle trees and")))merkle treeはSPVノードによってよく利用されます。SPVノードは全てのトランザクションを持たず完全なブロックチェーンをダウンロードすることもありません。SPVノードはauthentication pathまたはmerkle pathを使って、あるトランザクションがブロックに含まれているかどうか確認します。

Consider, for example, an SPV node that is interested in incoming payments to an address contained in its wallet. The SPV node will establish a bloom filter on its connections to peers to limit the transactions received to only those containing addresses of interest. When a peer sees a transaction that matches the bloom filter, it will send that block using a((("merkleblock message"))) +merkleblock+ message. The +merkleblock+ message contains the block header as well as a merkle path that links the transaction of interest to the merkle root in the block. The SPV node can use this merkle path to connect the transaction to the block and verify that the transaction is included in the block. The SPV node also uses the block header to link the block to the rest of the blockchain. The combination of these two links, between the transaction and block, and between the block and blockchain, proves that the transaction is recorded in the blockchain. All in all, the SPV node will have received less than a kilobyte of data for the block header and merkle path, an amount of data that is more than a thousand times less than a full block (about 1 megabyte currently).(((range="endofrange", startref="ix_ch07-asciidoc0")))

例として、ウォレット内にあるBitcoinアドレスへの支払いにだけ関心のあるSPVノードを考えてみましょう。SPVノードは、ウォレット内のBitcoinアドレスを含むトランザクションだけを取得するためピアにbloom filterを送ります。ピアはbloom filterに合致するトランザクションを確認し、((("merkleblock message"))) +merkleblock+ messageを使ってブロック情報を送り返します。この +merkleblock+ messageにはブロックヘッダとmerkle pathが含まれており、このmerkle pathはSPVノードにとって関心のあるトランザクションからmerkle rootへの経路です。SPVノードはこのmerkle pathを使って関心のあるトランザクションを参照しブロック内に含まれていることを確認し、またブロックヘッダを使いブロックをブロックチェーンの残りと結びつけます。???? ２つの連結の組み合わせ、トランザクションとブロック、ブロックとブロックチェーン、を使うことでこのトランザクションがブロックチェーンに記録されているということを確認します。SPVノードはブロックヘッダに対するデータとmerkle pathに関するデータという1KB以下のデータを受け取ることになり、full nodeと比べて１０００分の１以下のデータを保持するだけで済むことになります(現在だと1MB程度)。
